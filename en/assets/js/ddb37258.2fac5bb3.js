"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2197],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=o.createContext({}),c=function(e){var r=o.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=c(e.components);return o.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=t,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?o.createElement(m,i(i({ref:r},u),{},{components:n})):o.createElement(m,i({ref:r},u))}));function f(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9996:function(e,r,n){n.r(r),n.d(r,{assets:function(){return l},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c}});var o=n(3117),t=(n(7294),n(3905));const a={id:"errors",title:"Errors"},i=void 0,s={unversionedId:"component/errors",id:"component/errors",title:"Errors",description:"You can define errors in protos and generate enums with protoc-gen-go.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md",sourceDirName:"component",slug:"/component/errors",permalink:"/en/docs/component/errors",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"errors",title:"Errors"},sidebar:"docs",previous:{title:"Encoding",permalink:"/en/docs/component/encoding"},next:{title:"Logger",permalink:"/en/docs/component/log"}},l={},c=[{value:"Installation",id:"installation",level:3},{value:"Error Defination",id:"error-defination",level:3},{value:"Error Generation",id:"error-generation",level:3},{value:"Usage",id:"usage",level:3}],u={toc:c};function p(e){let{components:r,...n}=e;return(0,t.kt)("wrapper",(0,o.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"You can define errors in protos and generate enums with protoc-gen-go."),(0,t.kt)("p",null,"Error in errors pacakge implements GRPCStatus() interface,The conversion between grpc and HTTP error code is realized, and the business reason is returned through errorinfo."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'{\n    // The error code is consistent with HTTP status and can be converted into grpc status in grpc.\n    "code": 500,\n    // The error reason is defined as the business judgment error code.\n    "reason": "USER_NOT_FOUND",\n    // Error information is user-readable information and can be used as user prompt content.\n    "message": "invalid argument error",\n    // Error meta information, add additional extensible information for the error.\n    "metadata": {\n      "foo": "bar"\n    }\n}\n')),(0,t.kt)("h3",{id:"installation"},"Installation"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"go install github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2\n")),(0,t.kt)("h3",{id:"error-defination"},"Error Defination"),(0,t.kt)("p",null,"api/helloworld/v1/helloworld.proto"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\npackage api.kratos.v1;\nimport "errors/errors.proto";\n\n// Define the package name for source code reference.\noption go_package = "kratos/api/helloworld;helloworld";\noption java_multiple_files = true;\noption java_package = "api.helloworld";\n\nenum ErrorReason {\n  // Set default error code.\n  option (errors.default_code) = 500;\n\n  // Set the error code separately for an enumeration.\n  USER_NOT_FOUND = 0 [(errors.code) = 404];\n\n  CONTENT_MISSING = 1 [(errors.code) = 400];\n}\n')),(0,t.kt)("h3",{id:"error-generation"},"Error Generation"),(0,t.kt)("p",null,"To generate code with protoc."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"protoc --proto_path=. \\\n         --proto_path=./third_party \\\n         --go_out=paths=source_relative:. \\\n         --go-errors_out=paths=source_relative:. \\\n         $(API_PROTO_FILES)\n")),(0,t.kt)("p",null,"Or use the makefile directive at the root of the project"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"make errors\n")),(0,t.kt)("p",null,"After successful execution, will be generated in the api/helloworld directory a go file,The code is as follows."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'package helloworld\n\nimport (\n    fmt "fmt"\n    errors "github.com/go-kratos/kratos/v2/errors"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the kratos package it is being compiled against.\nconst _ = errors.SupportPackageIsVersion1\n\nfunc IsUserNotFound(err error) bool {\n    if err == nil {\n        return false\n    }\n    e := errors.FromError(err)\n    return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404\n}\n\nfunc ErrorUserNotFound(format string, args ...interface{}) *errors.Error {\n    return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))\n}\n\nfunc IsContentMissing(err error) bool {\n    if err == nil {\n        return false\n    }\n    e := errors.FromError(err)\n    return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400\n}\n\nfunc ErrorContentMissing(format string, args ...interface{}) *errors.Error {\n    return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))\n}\n')),(0,t.kt)("h3",{id:"usage"},"Usage"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'import "kratos/api/helloworld"\n\nerr := wrong()\n\nif errors.Is(err,errors.BadRequest("USER_NAME_EMPTY","")) {\n// do something\n}\n\ne := errors.FromError(err)\nif  e.Reason == "USER_NAME_EMPTY" && e.Code == 500 {\n// do something\n}\n\nif helloworld.IsUserNotFound(err) {\n// do something\n})\n')))}p.isMDXComponent=!0}}]);