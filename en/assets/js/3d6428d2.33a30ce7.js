"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1991],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,d=u["".concat(s,".").concat(m)]||u[m]||g[m]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5526:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return a},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var r=n(3117),i=(n(7294),n(3905));const o={id:"registry",title:"Registry"},a=void 0,c={unversionedId:"component/registry",id:"component/registry",title:"Registry",description:"Interface",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/08-registry.md",sourceDirName:"component",slug:"/component/registry",permalink:"/en/docs/component/registry",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/08-registry.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"registry",title:"Registry"},sidebar:"docs",previous:{title:"Metrics",permalink:"/en/docs/component/metrics"},next:{title:"Routing and Load Balancing",permalink:"/en/docs/component/selector"}},s={},l=[{value:"Interface",id:"interface",level:3},{value:"Usage",id:"usage",level:3},{value:"Register a Service",id:"register-a-service",level:4},{value:"Service Discovery (gRPC)",id:"service-discovery-grpc",level:4}],p={toc:l};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"interface"},"Interface"),(0,i.kt)("p",null,"Registry has two interface, the Registrar is for services' register and deregister, the Discovery is for fetching the list of services."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type Registrar interface {\n    // register the service\n    Register(ctx context.Context, service *ServiceInstance) error\n    // deregister the service\n    Deregister(ctx context.Context, service *ServiceInstance) error\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type Discovery interface {\n    // fetch the service list of serviceName\n    Fetch(ctx context.Context, serviceName string) ([]*ServiceInstance, error)\n    // subscribe to a list of serviceName\n    Watch(ctx context.Context, serviceName string) (Watcher, error)\n}\n")),(0,i.kt)("p",null,"Implementations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/consul"},"consul")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/discovery"},"discovery")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/etcd"},"etcd")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/kubernetes"},"kubernetes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/nacos"},"nacos")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/polaris"},"polaris")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/zookeeper"},"zookeeper"))),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("h4",{id:"register-a-service"},"Register a Service"),(0,i.kt)("p",null,"Create a Registrar(e.g. consul) and inject it to Kratos applications. Then the framework will do register and deregister automatically."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    consul "github.com/go-kratos/consul/registry"\n    "github.com/hashicorp/consul/api"\n)\n\n// new consul client\nclient, err := api.NewClient(api.DefaultConfig())\nif err != nil {\n    panic(err)\n}\n// new reg with consul client\nreg := consul.New(client)\n\napp := kratos.New(\n    // service-name\n    kratos.Name(Name),\n    kratos.Version(Version),\n    kratos.Metadata(map[string]string{}),\n    kratos.Logger(logger),\n    kratos.Server(\n        hs,\n        gs,\n    ),\n    // with registrar\n    kratos.Registrar(reg),\n)\n')),(0,i.kt)("p",null,"If use etcd or any other implementations, you can create a Registrar with other client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/go-kratos/kratos/contrib/registry/etcd/v2"\n    clientv3 "go.etcd.io/etcd/client/v3"\n)\n\n// new etcd client\nclient, err := clientv3.New(clientv3.Config{\n    Endpoints: []string{"127.0.0.1:2379"},\n})\nif err != nil {\n    panic(err)\n}\n// new reg with etcd client\nreg := etcd.New(client)\n\napp := kratos.New(\n    // service-name\n    kratos.Name(Name),\n    kratos.Version(Version),\n    kratos.Metadata(map[string]string{}),\n    kratos.Logger(logger),\n    kratos.Server(\n        hs,\n        gs,\n    ),\n    // with registrar\n    kratos.Registrar(reg),\n)\n')),(0,i.kt)("h4",{id:"service-discovery-grpc"},"Service Discovery (gRPC)"),(0,i.kt)("p",null,"Create a Registrar(e.g. consul), create an Endpoint with url format as ",(0,i.kt)("inlineCode",{parentName:"p"},"<schema>://[authority]/<service-name>"),", then use ",(0,i.kt)("inlineCode",{parentName:"p"},"grc.WithDiscovery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"grpc.WithEndpoint")," as the options of the Dial method to get the gRPC connection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n\n    consul "github.com/go-kratos/consul/registry"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n    "github.com/hashicorp/consul/api"\n)\n\n// new consul client\nclient, err := api.NewClient(api.DefaultConfig())\nif err != nil {\n    panic(err)\n}\n// new dis with consul client\ndis := consul.New(client)\n\nendpoint := "discovery:///provider"\nconn, err := grpc.Dial(context.Background(), grpc.WithEndpoint(endpoint), grpc.WithDiscovery(dis))\nif err != nil {\n    panic(err)\n}\n')),(0,i.kt)("p",null,"It is the same as Register, if use etcd or any other implementations, you can create a Discovery with other client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/go-kratos/kratos/contrib/registry/etcd/v2"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n    clientv3 "go.etcd.io/etcd/client/v3"\n)\n\n// new etcd client\nclient, err := clientv3.New(clientv3.Config{\n    Endpoints: []string{"127.0.0.1:2379"},\n})\nif err != nil {\n    panic(err)\n}\n// new dis with etcd client\ndis := etcd.New(client)\n\n// This Dial need to use DialInsecure() or use grpc.WithTransportCredentials in Dial option\nendpoint := "discovery:///provider"\nconn, err := grpc.Dial(context.Background(), grpc.WithEndpoint(endpoint), grpc.WithDiscovery(dis))\nif err != nil {\n    panic(err)\n}\n')))}g.isMDXComponent=!0}}]);